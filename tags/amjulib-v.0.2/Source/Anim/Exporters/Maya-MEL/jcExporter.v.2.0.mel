/*
JC Exporter v.2.0
8/10/2009
Export mesh, skeleton, skin and animation
*/


global proc jc()
{
	string $window = `window 	-title "JC Exporter v.2.0"
					-iconName "todo"
					-widthHeight 600 400
					"MeshExporter"`;

	columnLayout -adjustableColumn false   -rowSpacing 10 -columnOffset "both" 15;

	text -label "Select the mesh FIRST and the root bone SECOND." -align "left";
	text -label "Output name (no extension):" -align "left";
	string $fileName = `textField -width 300`;
	button -label "..." -command ("textField -e -text `fileDialog -mode 1 `" + $fileName);

	text -label "If you change the mesh or skeleton, you must re-do the skin." -align "left";

	text -label "If you change the mesh, skeleton or skin, you must re-export everything." -align "left";


	button -label "Export mesh, skeleton and skin" -command ("string $opt = \"\";" +
	      "jcExportAll(`textField -q -text " + $fileName + "`, $opt);");

	text -label "If you change the mesh, skeleton or skin, you must re-export ALL anims." -align "left";

	button -label "Export animation" -command ("string $opt = \"\";" +
	      "jcExportAnim(`textField -q -text " + $fileName + "`, $opt);");

	setParent ..; setParent ..;
	showWindow $window;
}

global proc jcExportAll(string $filename, string $options)
{
	if($filename == "")
	{
		confirmDialog 	-title "Error"
				-message "You have to enter a file name"
	 			-button "OK" -defaultButton "OK";
	 	return;
	}
	 
	// Check for all export errors up front, so we don't export some files but not others
	if (Errors())
	{
		return;
	}

 	string $res;
 	$res = `confirmDialog 	-title "Confirm"
					-message "You are about to export mesh, skeleton and skin files. Are you sure about this ?"
					-button "Yes"
					-button "No"
					-defaultButton "Yes"
					-cancelButton "No"
					-dismissString "No"`;
	if($res != "Yes")
	{
		return;
	}
	
       jcExportMesh($filename + "_mesh.txt", $options);
       jcExportSkel($filename + "_skel.txt", $options);
       jcExportSkin($filename + "_skin.txt", $options);
}

global proc int Errors()
{
	string $theMesh;
	string $selected[];
	string $tempArrString[];
	int $tempArrInt[];


	$selected = `ls -sl`;	
	if (size($selected) != 2)
	{
		confirmDialog 	-title "Error"
					-message "You have to select the mesh and then the root bone!"
					-button "OK" -defaultButton "OK";
		return 1;
	}

	// Check mesh
	$theMesh = $selected[0];
	if(catch($tempArrInt = `polyEvaluate -t $theMesh`))
	{
		//TODO: this is not 100% sure, fix

		confirmDialog 	-title "Error"
					-message "First selected object is not a mesh!?"
					-button "OK" -defaultButton "OK";
		return 1;
	}
	$numberOfFaces = $tempArrInt[0];
	if($numberOfFaces < 1)
	{
		confirmDialog 	-title "Error"
					-message "No faces found on the mesh object!?"
					-button "OK" -defaultButton "OK";
		return 1;
	}

	//check if the object is triangulated
	$tempArrInt = `polyEvaluate -f $theMesh`;
	if($numberOfFaces != $tempArrInt[0])
	{
		//Triangulate the object to make sure we only get three vertices per face
		string $res;
		$res = `confirmDialog 	-title "Confirm"
						-message "The polygon object is not triangulated.\nObject must be triangulated for export.\nDo you wish to triangulate the object?"
						-button "Yes"
						-button "No"
						-defaultButton "Yes"
						-cancelButton "No"
						-dismissString "No"`;
		if($res != "Yes")
		{
			return 1;
		}

		polyTriangulate -ch 1 $theMesh;
	}

	// Check skeleton
	string $selType[] = `ls -sl -showType`;
	if($selType[3] != "joint")
	{
		confirmDialog 	-title "Error"
					-message "Second selected object is not a joint!?"
					-button "OK" -defaultButton "OK";
		return 1;
	}
		
	// Check Skin
	string $skinCluster; //skin cluster node, empty if no skin in scene
	string $AllskinClusters[];

	//Find the skincluster for the geometry
	if (`objExists "*skinCluster*"`) 
	{
		select -r "*skinCluster*";
		select -d "*Group*";
		select -d "*Filter*";
		$AllskinClusters = `ls -sl`;
		$tempArrString = `ls -dag -s $theMesh`; //get the shape node
		$tempArrString = `listConnections $tempArrString[0]`; //get skinclusters from shape node
		for($i=0; $i < size($AllskinClusters); $i++) 
		{
			for($j=0;$j<size($tempArrString);$j++) 
			{
				if (($AllskinClusters[$i] + "Set") == $tempArrString[$j])
				{					
					$skinCluster = $AllskinClusters[$i];
					break;
				}
			}
		}
	}
	if(size($skinCluster) == 0)
	{
		confirmDialog 	-title "Export Skin"
					-message "No skincluster found for mesh.\nSkipping skin export."
					-button "OK" -defaultButton "OK";
		return 1;
	}

	// TODO This check doesn't work!
	/*
	int $maxInf = `getAttr ($skinCluster + ".maxInfluences")`;
	if($maxInf > 4)
	{
		confirmDialog 	-title "Export Skin"
					-message "Skincluster has more than 4 influences per joint.\nWe only support max 4 influences."
					-button "OK" -defaultButton "OK";
		return 1;
	}
	*/

	// Check max influences
	int $vertexCount[] = `polyEvaluate -v $theMesh`;

	for ($i=0; $i < $vertexCount[0]; $i++)
	{
		//get weights for this vertex
		float $weights[] = `skinPercent -q -v $skinCluster ($theMesh + ".vtx[" + $i + "]")`;
		int $numWeights = 0;
		for($j = 0; $j < size($weights); $j++)
		{
			if($weights[$j] != 0) 
			{
				$numWeights++;
			}
		}

		if ($numWeights > 4)
		{
			confirmDialog 	-title "Export Skin"
						-message "Skincluster has more than 4 influences per joint,\nWe only support max 4 influences."
						-button "OK" -defaultButton "OK";
			return 1;
		}
	}

	select $selected;

	return 0;
}

global proc jcExportMesh(string $filename, string $options)
{
	string $theObject;
	string $tempArrString[];
	int $tempArrInt[];

	//check if the object to export is selected
	$tempArrString = `ls -sl`;	

	//get the object to export
	$theObject = $tempArrString[0];
	
	// Get number of faces
	$tempArrInt = `polyEvaluate -t $theObject`;

	$numberOfFaces = $tempArrInt[0];

	/*
	if(`filetest -w $filename` == 1)
	{
	 	string $res;
	 	$res = `confirmDialog 	-title "Confirm"
					-message "Overwrite existing file?"
					-button "Yes"
					-button "No"
					-defaultButton "Yes"
					-cancelButton "No"
					-dismissString "No"`;
		if($res != "Yes")
			return;
	}
	*/


	// Open the file
	cmdFileOutput -open $filename;

	// Print header info
	print "// j.c. export. Ver:\r\n";
	print "13\r\n";


	int $vertexCount[] = `polyEvaluate -v $theObject`;

	//	get number of uvs on the mesh
	int $uvCount[] = `polyEvaluate -uv $theObject`;

	global string $gMainProgressBar;
	int $maxProgress = $vertexCount[0] + $numberOfFaces + $uvCount[0];
	progressBar -e -bp -ii 1 -max $maxProgress $gMainProgressBar;

	// Print out all the vertices
	//	print number of vertices
	print( "// Num verts\r\n" + $vertexCount[0] + "\r\n" );

	//	process each vertex
	for ($i=0; $i < $vertexCount[0]; $i++)
	{
		if (`progressBar -q -ic $gMainProgressBar`)
		{
			progressBar -e -endProgress $gMainProgressBar;
			cmdFileOutput -closeAll;

		       // Fix selection so it's the same as when we started.
       		select $tempArrString;

			return;
		}
		progressBar -e -s 1 $gMainProgressBar; // increases the progress bar
	
		//	get vertex co-ord and any relative tweaks
		float $vert[]   = `getAttr ($theObject+".vt["+$i+"]")`;
		float $offset[] = `getAttr ($theObject+".pt["+$i+"]")`;

		//	final vert pos = vertex + offset, output it!
		$vert[0] += $offset[0];
		$vert[1] += $offset[1];
		$vert[2] += $offset[2];
		
		print ("// Vert " + $i + ": x, y, z\r\n");
		print ($vert[0] + "\r\n" + $vert[1] + "\r\n" + $vert[2] + "\r\n");
	}

	// Print out the 3 vert indices for each triangle
	print "// Number of tris\r\n";
	print ($numberOfFaces + "\r\n");
	for ($i = 0; $i < $numberOfFaces; $i++)
	{
		if (`progressBar -q -ic $gMainProgressBar`)
		{
			progressBar -e -endProgress $gMainProgressBar;
			cmdFileOutput -closeAll;

		       // Fix selection so it's the same as when we started.
       		select $tempArrString;

			return;
		}
		progressBar -e -s 1 $gMainProgressBar; // increases the progress bar

		print ("// tri " + $i + "\r\n");

		int $vCount =0;
		
		select -r ( $theObject+".f["+$i+"]");

		//	find the vertex indices used by this face and split the returned string
		//	to make life easier ...
		string $vinds[] = `polyInfo -fv`;
		string $split[];
		tokenize $vinds[0] $split;


		for ($j=0; $j < 3; $j++)  
		{
			//	select the vertex/face pair
			select -r ($theObject+".vtxFace["+$split[($j+2)]+"]["+$i+"]");

			//	use polyNormalPerVertex to get the vertex normal values....
			float $norm[] = `polyNormalPerVertex -q -xyz`;

			//	query the vertex/face relationship to see which uv
			//	it uses
			string $tinds[] = `polyListComponentConversion -fvf -tuv 
							($theObject+".vtxFace["+$split[($j+2)]+"]["+$i+"]")`;

			//	split the string to get the [] at the end...
			string $buffer[];
			tokenize $tinds[0] "[]" $buffer;

			//	put all the info together
			print( "// Vert ind:\r\n" + $split[(2+$j)] + //	vertex index number
					"\r\n// UV ind:\r\n" + $buffer[1]     + //	the tex coord index number
					"\r\n// Normal x, y, z:\r\n" + $norm[0]       + //	the x component of the normal
					 "\r\n" + $norm[1]       + //	the y component of the normal
					 "\r\n" + $norm[2] +"\r\n" );//	the z component of the normal
		}

	}

	// UVs
	print "// Num UVs\r\n";

	print($uvCount[0] + "\r\n");

	for ($i=0; $i < $uvCount[0]; $i++)
	{
		if (`progressBar -q -ic $gMainProgressBar`)
		{
			progressBar -e -endProgress $gMainProgressBar;
			cmdFileOutput -closeAll;

		       // Fix selection so it's the same as when we started.
       		select $tempArrString;

			return;
		}
		progressBar -e -s 1 $gMainProgressBar; // increases the progress bar

		//	get the uv coord
		float $uvs[] = `getAttr ($theObject + ".uv[" + $i +"]")`;

		//	print value
		print("// UV " + $i + "\r\n" + $uvs[0] + "\r\n" + $uvs[1] + "\r\n");
	}

	cmdFileOutput -closeAll;

       // Fix selection so it's the same as when we started.
       select $tempArrString;

	progressBar -e -endProgress $gMainProgressBar;
}

global proc jcExportSkel(string $filename, string $options)
{
	string $tempArrString[];
	 
	/*
	if(`filetest -w $filename` == 1)
	{
	 	string $res;
	 	$res = `confirmDialog 	-title "Confirm"
					-message "Overwrite existing file?"
					-button "Yes"
					-button "No"
					-defaultButton "Yes"
					-cancelButton "No"
					-dismissString "No"`;
		if($res != "Yes")
			return;
	}
	*/

	//check if the joint to export is selected
	$tempArrString = `ls -sl`;	
		
	//get the joint to export
	$joint = $tempArrString[1];


	// Open the file
	cmdFileOutput -open $filename;

	// Print header info
	print "// j.c. export. Ver:\r\n";
	print "11\r\n";

	// Print total number of joints
	string $descendents[] = `listRelatives -allDescendents $joint`;
	int $numDescendents = size($descendents);
	// Extra one for this joint
	$numDescendents++;
	print ("// Num joints\r\n" + $numDescendents + "\r\n");

       jcExportSkel1($joint);

	cmdFileOutput -closeAll;
}

global proc jcExportSkel1(string $joint)
{
	print ("// Joint name\r\n" + $joint + "\r\n");

	print ("// Transformation Matrix:\r\n");

	float $transMatrix[] = `getAttr ($joint + ".matrix")`;

	int $j;
	for($j = 0; $j < 16; $j++)
	{
		print ($transMatrix[$j] + "\r\n");
	}

	// Output names of children
	string $children[] = `listRelatives -c $joint`;
	int $numChildren = size($children);

	print ("// Num children\r\n" + $numChildren + "\r\n");

	for($i = 0; $i < $numChildren; $i++)
	{
		print ("// Child " + $i + "\r\n" + $children[$i] + "\r\n");
	}

	for($i = 0; $i < $numChildren; $i++)
	{
		jcExportSkel1($children[$i]);
	}
}

global proc jcExportSkin(string $filename, string $options)
{
	string $tempArrString[];
	 
	/*
	if(`filetest -w $filename` == 1)
	{
	 	string $res;
	 	$res = `confirmDialog 	-title "Export Skin"
					-message "Overwrite existing file?"
					-button "Yes"
					-button "No"
					-defaultButton "Yes"
					-cancelButton "No"
					-dismissString "No"`;
		if($res != "Yes")
			return;
	}
	*/

	//get the mesh
	$tempArrString = `ls -sl`;
	$theObject = $tempArrString[0];
//print $theObject;
	
       int $tempArrInt[];
       
	// Get number of faces
	if(catch($tempArrInt = `polyEvaluate -t $theObject`))
	{
		//TODO: this is not 100% sure, fix

		confirmDialog 	-title "Export Skin"
					-message "Selected object is not a mesh ?"
					-button "OK" -defaultButton "OK";
		return;
	}

	$numberOfFaces = $tempArrInt[0];
	if($numberOfFaces < 1)
	{
		confirmDialog 	-title "Export Skin"
					-message "No faces found on the polygon object"
					-button "OK" -defaultButton "OK";
		return;
	}

	string $skinCluster; //skin cluster node, empty if no skin in scene
	string $AllskinClusters[];

	//Find the skincluster for the geometry
	if (`objExists "*skinCluster*"`) 
	{
		select -r "*skinCluster*";
		select -d "*Group*";
		select -d "*Filter*";
		$AllskinClusters = `ls -sl`;
		$tempArrString = `ls -dag -s $theObject`; //get the shape node
		$tempArrString = `listConnections $tempArrString[0]`; //get skinclusters from shape node
		for($i=0; $i < size($AllskinClusters); $i++) 
		{
			for($j=0;$j<size($tempArrString);$j++) 
			{
				if (($AllskinClusters[$i] + "Set") == $tempArrString[$j])
				{					
					$skinCluster = $AllskinClusters[$i];
					break;
				}
			}
		}
	}
	if(size($skinCluster) == 0)
	{
		confirmDialog 	-title "Export Skin"
					-message "No skincluster found for mesh.\nSkipping skin export."
					-button "OK" -defaultButton "OK";
		return;
	}

	// TODO This doesn't work
	int $maxInf = `getAttr ($skinCluster + ".maxInfluences")`;
	if($maxInf > 4)
	{
		confirmDialog 	-title "Export Skin"
					-message "Skincluster has more than 4 influences per joint.\nWe only support max 4 influences."
					-button "OK" -defaultButton "OK";
		return;
	}
				
	// Open the file
	cmdFileOutput -open $filename;

	// Print header info
	print "// j.c. export. Ver:\r\n";
	print "11\r\n";

	int $vertexCount[] = `polyEvaluate -v $theObject`;

	global string $gMainProgressBar;
	progressBar -e -bp -ii 1 -max $vertexCount[0] $gMainProgressBar;

	// print number of vertices
	print( "// Num verts\r\n" + $vertexCount[0] + "\r\n" );

	// process each vertex
	for ($i=0; $i < $vertexCount[0]; $i++)
	{
		if (`progressBar -q -ic $gMainProgressBar`)
		{
			progressBar -e -endProgress $gMainProgressBar;
			cmdFileOutput -closeAll;

		       // Fix selection so it's the same as when we started.
       		select -replace $tempArrString;

			return;
		}
		progressBar -e -s 1 $gMainProgressBar; // increases the progress bar

		//get weights for this vertex
		float $weights[] = `skinPercent -q -v $skinCluster ($theObject + ".vtx[" + $i + "]")`;
		//get joint names for the skin weights
		string $jointNames[] = `skinPercent -q -t $skinCluster ($theObject + ".vtx[" + $i + "]")`;

		print ("// Vertex " + $i + "\r\n");
		print ("// Num weights:\r\n");

		int $numWeights = 0;
		for($j = 0; $j < size($weights); $j++)
		{
			if($weights[$j] != 0) 
			{
				$numWeights++;
			}
		}

		if ($numWeights > 4)
		{
			confirmDialog 	-title "Export Skin"
						-message "Skincluster has more than 4 influences per joint,\nWe only support max 4 influences."
						-button "OK" -defaultButton "OK";
			return;
		}
		
		print ($numWeights + "\r\n"); 

		//for each weight that is not zero
		int $j;
		for($j = 0; $j < size($weights); $j++)
		{
			if($weights[$j] != 0)
			{
				print ("// Joint name:\r\n" + $jointNames[$j] + "\r\n");
				print ("// Weight:\r\n" + $weights[$j] + "\r\n");
			}
		}
	}

	cmdFileOutput -closeAll;

       // Fix selection so it's the same as when we started.
       select -replace $tempArrString;

	progressBar -e -endProgress $gMainProgressBar;
}

global proc jcExportAnim(string $filename, string $options)
{
	if($filename == "")
	{
		confirmDialog 	-title "Error"
				-message "You have to enter a file name"
	 			-button "OK" -defaultButton "OK";
	 	return;
	}

	$filename += "_anim.txt";

	string $tempArrString[];

	if(`filetest -w $filename` == 1)
	{
	 	string $res;
	 	$res = `confirmDialog 	-title "Export Anim"
					-message "Overwrite existing file?"
					-button "Yes"
					-button "No"
					-defaultButton "Yes"
					-cancelButton "No"
					-dismissString "No"`;
		if($res != "Yes")
			return;
	}

	$tempArrString = `ls -sl`;

	//check if the joint to export is selected
	string $selType[] = `ls -sl -showType`;
		
	if($selType[3] != "joint")
	{
		confirmDialog 	-title "Export Anim"
					-message "Selected object is not a joint"
					-button "OK" -defaultButton "OK";
		return;
	}
		
	//get the joint to export
	$joint = $tempArrString[1];


	// Open the file
	cmdFileOutput -open $filename;

	// Print header info
	print "// j.c. export. Ver:\r\n";
	print "11\r\n";

	jcExportAnimForJoint($joint);

	cmdFileOutput -closeAll;

       // Fix selection so it's the same as when we started.
       select -replace $tempArrString;
}

global proc jcPrintNumKeyframedJoints(string $joint)
{
	string $jointNames[] = `ls -dag -type "joint" $joint`;

	int $total = 0;
	for($i = 0; $i < size($jointNames); $i++)
	{
		int $key = `findKeyframe -time 0 -which next $jointNames[$i]`;
		if($key != 0)
		{
			$total++;
		}

		string $ik[] = `listConnections -type "ikHandle" $jointNames[$i]`;

		if(size($ik) > 0)
		{
			$key = `findKeyframe -time 0 -which next $ik[0]`;
			if($key != 0)
 			{
				string $js[] = `ikHandle -q -jl $ik[0]`;
				$total += size($js);
			}
		}
	}

	print ("// Num joints\r\n" + $total + "\r\n");
}

global proc jcExportAnimForJoint(string $joint)
{
	// Count and print number of keyframed joints
	jcPrintNumKeyframedJoints($joint);

	int $i;
	string $jointNames[] = `ls -dag -type "joint" $joint`;

	for($i = 0; $i < size($jointNames); $i++)
	{
		jcExpJointKeyframes($jointNames[$i]);

		string $ik[] = `listConnections -type "ikHandle" $jointNames[$i]`;

		if(size($ik) > 0)
		{
			jcExpIkKeyframes($ik[0]);
		}
	}
}

global proc jcPrintKeyFramesMatrix(string $joint, string $getMatrix)
{
	int $key = `findKeyframe -time 0 -which next $joint`;

	float $tempFloatArr[];
	float $tempQuats[];
	float $keyMats[];
	int $keyFrames[];
	int $nrOfKeys;
	float $keyTrans[];
	$j = 0;
	int $nextKey;

	while(true)
	{
		currentTime -edit $key;
		$keyFrames[$j] = $key;
		$tempFloatArr = `getAttr ($getMatrix + ".xformMatrix")`;

		// copy matrix
		for($k = 0; $k < 16; $k++)
		{
			$keyMats[($j*16)+$k] = $tempFloatArr[$k];
		}
			
		$nextKey = `findKeyframe -time $key -which next $joint`;
		if($nextKey == $key)
		{
			$nrOfKeys = $j+1;
			break; //last key found
		}

		$key = $nextKey;					
		$j++;
	}

	//now print them
	print ("// Num keyframes\r\n" + $nrOfKeys + "\r\n"); 

	for($j = 0; $j < $nrOfKeys; $j++)
	{
		print ("// Keyframe " + $j + "\r\n// Time\r\n" + $keyFrames[$j] / 24.0 + "\r\n// Matrix:\r\n"); 

		for ($k = 0; $k < 16; $k++)
		{
			print ($keyMats[($j*16)+$k] + "\r\n");
		}
	}

	print "// End of keyframes for joint\r\n"; 
}

global proc jcExpIkKeyframes(string $ik)
{
	int $key = `findKeyframe -time 0 -which next $ik`;
	if($key == 0)
 	{
		return;
	}

	//for each joint that is affected by ik
	string $js[] = `ikHandle -q -jl $ik`;
	
	int $l;			
	for($l = 0; $l < size($js); $l++)
	{
		$joint = $js[$l];
		print ("// IK Joint name\r\n" + $joint + "\r\n");

		//jcPrintKeyFramesRST($ik);
		jcPrintKeyFramesMatrix($ik, $joint);
	}
}

global proc jcExpJointKeyframes(string $joint)
{
	//export all keyframes for this joint
	int $key = `findKeyframe -time 0 -which next $joint`;
	if($key == 0)
	{
		return;
	}
	else 
	{
		print ("// Joint name\r\n" + $joint + "\r\n");

		//jcPrintKeyFramesRST($joint);
		jcPrintKeyFramesMatrix($joint, $joint);
	}
}

global proc jcPrintKeyFramesRST(string $joint)
{
	int $key = `findKeyframe -time 0 -which next $joint`;

	float $tempFloatArr[];
	float $tempQuats[];
	float $keyQuats[];
	int $keyFrames[];
	int $nrOfKeys;
	float $keyTrans[];
	$j = 0;
	int $nextKey;

	while(true)
	{
		currentTime -edit $key;
		$keyFrames[$j] = $key;
		$tempFloatArr = `getAttr ($joint + ".xformMatrix")`;

		//transpose matrix to righthand coord system
		// ???	
		$tempFloatArr = transpose($tempFloatArr);

		//get the rotation as a quaternion
		$tempQuats = getQuaternion($tempFloatArr);

		// copy quats
		for($k = 0; $k < 4; $k++)
		{
			$keyQuats[($j*4)+$k] = $tempQuats[$k];
		}
			
		// Translation
		$tempFloatArr = `getAttr ($joint + ".translate")`;
				
		//copy translation values
		for($k = 0; $k < 3; $k++)
		{
			$keyTrans[($j*3)+$k] = $tempFloatArr[$k];
		}

		$nextKey = `findKeyframe -time $key -which next $joint`;
		if($nextKey == $key)
		{
			$nrOfKeys = $j+1;
			break; //last key found
		}

		$key = $nextKey;					
		$j++;
	}

	//now print them
	print ("// Num keyframes\r\n" + $nrOfKeys + "\r\n"); 

	for($j = 0; $j < $nrOfKeys; $j++)
	{
		print ("// Keyframe " + $j + "\r\n// Time\r\n" + $keyFrames[$j] / 24.0 + "\r\n// Quat:\r\n"); 

		for($k = 0; $k < 4; $k++)
		{
			print (fixFloat($keyQuats[($j*4)+$k]) + "\r\n");
		}
		print ("// Translation\r\n");
		for($k = 0; $k < 3; $k++)
		{
			print (fixFloat($keyTrans[($j*3)+$k]) + "\r\n");
		}
	}

	print "// End of keyframes for joint\r\n"; 
}

//function to convert a floating point value to a string with fixed numbers of decimals
global proc string fixFloat(float $v)
{
	int $deci = 6; //decimals to print

	int $v2 = $v;
	string $out;
	if($v < 0 && $v > -1)
		$out = "-";
	$out = $out + $v2;
	$out = $out + ".";
	int $i;
	for($i = 0; $i < $deci; $i++)
	{
		$v = $v * 10;
		int $d = $v;
		$out = $out + abs($d%10);
	}
	return $out;
}

//function to get the quaternion based on matrix
//thanks to the Irrlicht 3D engine developer team for this code
global proc float[] getQuaternion(float $m[])
{
	float $X, $Y, $Z, $W;
	
	float $diag = $m[0] + $m[5] + $m[10] + 1.0;

	//clamp value to fix rounding error in MEL
	int $temp = $diag * 1000000;
	$diag = $temp * 0.000001;

	float $scale = 0.0;

	if( $diag > 0.0 )
	{
		$scale = 0.5 / sqrt($diag); // get scale from diagonal

		$X = ( $m[6] - $m[9] ) * $scale;
		$Y = ( $m[8] - $m[2] ) * $scale;
		$Z = ( $m[1] - $m[4] ) * $scale;
		$W = 0.25 / $scale;
	}
	else
	{
		if ( $m[0] > $m[5] && $m[0] > $m[10])  
		{	
			// 1st element of diag is greatest value
			// find scale according to 1st element, and double it
			$scale = sqrt( 1.0 + $m[0] - $m[5] - $m[10]) * 2.0;

			$X = 0.25 * $scale;
			$Y = ($m[4] + $m[1]) / $scale;
			$Z = ($m[2] + $m[8]) / $scale;
			$W = ($m[9] - $m[6]) / $scale;	
		} 
		else if ( $m[5] > $m[10]) 
		{
			// 2nd element of diag is greatest value
			// find scale according to 2nd element, and double it
			$scale = sqrt( 1.0 + $m[5] - $m[0] - $m[10]) * 2.0;
			
			$X = ($m[4] + $m[1] ) / $scale;
			$Y = 0.25 * $scale;
			$Z = ($m[9] + $m[6] ) / $scale;
			$W = ($m[2] - $m[8] ) / $scale;
		} 
		else 
		{	
			// 3rd element of diag is greatest value
			// find scale according to 3rd element, and double it
			$scale  = sqrt( 1.0 + $m[10] - $m[0] - $m[5]) * 2.0;

			$X = ($m[2] + $m[8]) / $scale;
			$Y = ($m[9] + $m[6]) / $scale;
			$Z = 0.25 * $scale;
			$W = ($m[4] - $m[1]) / $scale;
		}
	}

	//normalize
	float $n = $X*$X + $Y*$Y + $Z*$Z + $W*$W;

	if ($n != 1)
	{
		$n = 1.0 / sqrt($n);
		$X *= $n;
		$Y *= $n;
		$Z *= $n;
		$W *= $n;
	}
	
	//return it with the W value first a'la directx
	float $out[];
	$out[0] = $W;
	$out[1] = $X;
	$out[2] = $Y;
	$out[3] = $Z;
	
	return $out;
}

//function to transpose a matrix
global proc float[] transpose(float $m[])
{
	float $out[];
	$out[0] = $m[0];
	$out[1] = $m[4];
	$out[2] = $m[8];
	$out[3] = $m[12];
	$out[4] = $m[1];
	$out[5] = $m[5];
	$out[6] = $m[9];
	$out[7] = $m[13];
	$out[8] = $m[2];
	$out[9] = $m[6];
	$out[10] = $m[10];
	$out[11] = $m[14];
	$out[12] = $m[3];
	$out[13] = $m[7];
	$out[14] = $m[11];
	$out[15] = $m[15];
	
	return $out;
}


jc();
