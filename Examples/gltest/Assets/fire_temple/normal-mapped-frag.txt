// Normal map frag shader

// List uniforms with this directive, and c++ will create objects which sets their values
#uniform UniformLightDir lightDir

varying vec2 vUV;
varying vec3 vNormal;
varying vec3 vTangent;

uniform vec4 colour;
uniform vec3 lightDir;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;

// From http://ogldev.atspace.co.uk/www/tutorial26/tutorial26.html
vec3 CalcBumpedNormal()
{
    vec3 Normal = normalize(vNormal);
    vec3 Tangent = normalize(vTangent);
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);
    vec3 Bitangent = cross(Tangent, Normal);
    vec3 BumpMapNormal = texture2D(normalMap, vUV).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
    vec3 NewNormal;
    mat3 TBN = mat3(Tangent, Bitangent, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);
    return NewNormal;
}

void main()
{
    vec3 normal = CalcBumpedNormal();

    float nDotL = max(0.0, dot(normal, normalize(lightDir)));
    nDotL += 0.3;
    nDotL = min(1.0, nDotL);
    vec4 diffuseColour = texture2D(diffuseMap, vUV);

    gl_FragColor = diffuseColour * nDotL;
}

