// raytrace-frag.txt

// Texture encoding scene description
uniform sampler2D scene;

const int NUM_ROWS = 8;
const int NUM_PIXELS_PER_ROW = 8;

varying vec2 vUv;

// TODO Have a material type, embed in each of the geom types

struct material
{
  float reflectivity;
  vec3 diffuse;
};

struct ray
{
  vec3 origin;
  vec3 direction;
  float length;
};

struct sphere
{
  vec3 centre;
  float radius;
};

struct tri
{
  vec3 v[3];
};

/*
Ray-Tri Intersection
Adapted from http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/
Moller-Haines algorithm
*/
bool rayIntersectsTriangleMollerHaines(
    in vec3 p, in vec3 d,
    in vec3 v0, in vec3 v1, in vec3 v2,
    out vec3 intersectionPoint, out float tResult)
{
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;

    vec3 h = cross(d, e2);

    float a = dot(e1, h);

    if (a > -0.00001 && a < 0.00001)
        return(false);

    float f = 1.0 / a;
    vec3 s = p - v0;

    float u = f * dot(s, h);

    if (u < 0.0 || u > 1.0)
        return(false);

    vec3 q = cross(s, e1);

    float v = f * dot(d, q);

    if (v < 0.0 || u + v > 1.0)
        return(false);

    // at this stage we can compute t to find out where
    // the intersection point is on the line
    float t = f * dot(e2, q);

    if (t > 0.00001) // ray intersection
    {
        intersectionPoint = p + t * d;
        tResult = t;
        return(true);
    }
    // this means that there is a line intersection but not a ray intersection
    return (false);
}

bool rayIntersectsTri(
    in ray r, in tri t, out vec3 intersectionPoint, out float tResult)
{
    return rayIntersectsTriangleMollerHaines(
      r.origin, r.direction, 
      t.v[0], t.v[1], t.v[2],
      intersectionPoint, tResult);
}

bool rayIntersectsSphere(in ray r, in sphere s, out float distance)
{
    vec3 p = r.origin;
    vec3 c = s.centre;
    vec3 vpc = c - p;


    float r2 = s.radius * s.radius;

    if (dot(vpc, r.direction) < 0.0) // when the sphere is behind the origin p
    {
        // note that this case may be dismissed if it is
        // considered that p is outside the sphere
        if (dot(vpc, vpc) > r2)
        {
            // there is no intersection
            return false;
        }
        else
        {
            // p is on or in the sphere
            distance = 0.0;
            return true;
        }
    }
    else // center of sphere projects on the ray
    {
        // pc = projection of c on the line
        vec3 pc = p + dot(r.direction, c - p) * r.direction;

        vec3 c_minus_pc = c - pc;
        if (dot(c_minus_pc, c_minus_pc) > r2)
        {
            // there is no intersection
            return false;
        }
        else
        {
            // distance from pc to i1
            // dist = sqrt(s.radius ^ 2 - | pc - c | ^ 2)
            vec3 pc_minus_c = pc - c;
            float dist = sqrt(r2 - dot(pc_minus_c, pc_minus_c));

            float di1 = 0.0;
            if (dot(vpc, vpc) > r2) // origin is outside sphere
            {
                //di1 = | pc - p | -dist
                di1 = length(pc - p) - dist;
            }
            else // origin is inside sphere
            {
                //di1 = | pc - p | +dist
                di1 = length(pc - p) + dist;
            }
            //intersection = p + d * di1
            distance = di1;
            return true;
        }
    }
    return true;
} 

// For test/demo, draw scene comprised of hardcoded spheres
void drawSphereScene(in ray r)
{
    int NUM_SPHERES = 2;
    sphere spheres[2]; 
    
    spheres[0].centre = vec3(0.25, 0.25, 10.0);
    spheres[0].radius = 0.2;
    spheres[1].centre = vec3(0.75, 0.75, 10.0);
    spheres[1].radius = 0.2;

    float bestDist = 99999.9;
    vec3 normal;
    bool foundIntersection = false;
    int sphereFound = 0;
    for (int i = 0; i < NUM_SPHERES; i++)
    {
      float d = 0.0;
      if (rayIntersectsSphere(r, spheres[i], d) && d < bestDist && d > 1.0)
      {
        foundIntersection = true;
        sphereFound = i;
        bestDist = d;
        // Work out normal on sphere at intersection point
        vec3 intersect = r.origin + r.direction * d;
        normal = intersect - spheres[i].centre;
      }
    }

    if (foundIntersection)
    {
      normalize(normal);
      const vec3 ambient = vec3(0.3, 0.3, 0.3);

      if (sphereFound == 0)
      {
        const vec3 lightdir = vec3(1, 1, -1);
        normalize(lightdir);
        float nDotL = max(0.0, dot(normal, lightdir));
        gl_FragColor.rgb = vec3(nDotL, 0.0, 0.0) + ambient;
      }
      else
      {
        gl_FragColor.rgb = vec3(0.0, 0.0, 1.0) + ambient;
      }
    }
    else
    {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
    gl_FragColor.a = 1.0;
}

void drawTriScene(in ray r)
{
    tri t;
    t.v[0] = vec3(0.1, 0.1, 1.0);
    t.v[1] = vec3(0.3, 0.1, 1.0);
    t.v[2] = vec3(0.1, 0.3, 1.0);

    vec3 intersectionPoint;
    float tResult;
    if (rayIntersectsTri(r, t, intersectionPoint, tResult))
    {
      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
      return;
    }

}

void drawTextureScene(in ray r)
{
    // Texture rows are meshes. Each row encodes triangle data
    float du = 1.0 / float(NUM_PIXELS_PER_ROW);
    float dv = 1.0 / float(NUM_ROWS);

    float v = 0.99;
    for (int row = 0; row < 1; row++)
    {
        float u = 0.001;
        for (int col = 0; col < 1; col++)
        {
            // Get tri: 3 texels
            vec4 v0 = texture2D(scene, vec2(u, v));
            u += du;
            vec4 v1 = texture2D(scene, vec2(u, v));
            u += du;
            vec4 v2 = texture2D(scene, vec2(u, v));
            u += du;
            tri t;
            t.v[0] = v0.xyz;
            t.v[1] = v1.xyz;
            t.v[2] = v2.xyz;
           
            vec3 intersectionPoint;
            float tResult;
             
            if (rayIntersectsTri(r, t, intersectionPoint, tResult))
            {
                gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
                return;
            }
        }
    }
    gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
}

void main()
{
    float x = vUv.x;
    float y = vUv.y;

    ray r;
    r.origin = vec3(x, y, 0.0);
    r.direction = vec3(0.0, 0.0, 1.0);
    r.length = 1000.0;

    //drawSphereScene(r);
//    drawTextureScene(r);

    gl_FragColor = texture2D(scene, vec2(x, y));
    gl_FragColor.a = 1.0;
}

